tests_results = { }

tests_have_x = [
    'accept4',
    'adjtime',
    'adjtimex',
    'affinity',
    'aio-cancel',
    'aio-read',
    'aio-write',
    'aligned-128',
    'aligned-64',
    'aligned-64K',
    'arch_prctl',
    'asm-nop',
    'atomic_add_fetch',
    'brk',
    'bsd-wchar',
    'builtin-cpu-is',
    'builtin-ctz',
    'builtin-memcpy',
    'builtin-memmove',
    'builtin-prefetch',
    'builtin-sfence',
    'cdrom_blk',
    'cdrom_mcn',
    'cdrom_msf',
    'cdrom_read_audio',
    'cdrom_subchnl',
    'cdrom_ti',
    'cdrom_tocentry',
    'cdrom_tochdr',
    'cdrom_volctrl',
    'chroot',
    'clearenv',
    'clock-getres',
    'clock-gettime',
    'clock-nanosleep',
    'clock-settime',
    'clone',
    'complex',
    'consolefontdesc',
    'copy-file-range',
    'cpuid',
    'crypt-r',
    'daddr_t',
    'darn',
    'dm_ioctl',
    'dup3',
    'dvd_authinfo',
    'dvd_struct',
    'endpwent',
    'epoll-create',
    'epoll-create1',
    'eventfd',
    'executable_start',
    'execveat',
    'faccessat',
    'faccessat2',
    'fallocate',
    'fanotify',
    'fchmodat',
    'fchownat',
    'fdatasync',
    'fgetxattr',
    'flistxattr',
    'flock',
    'fremovexattr',
    'fsetxattr',
    'fsverity_digest',
    'fsverity_enable_arg',
    'fsync',
    'futimens',
    'futimes',
    'futimesat',
    'getauxval',
    'getdomainname',
    'getdtablesize',
    'gethostid',
    'gethostname',
    'getmntent',
    'getmntinfo',
    'getpagesize',
    'getpgid',
    'getpgrp',
    'getpriority',
    'getpwent',
    'getresgid',
    'getresuid',
    'getrusage',
    'getsid',
    'getxattr',
    'icmphdr',
    'ifconf',
    'ino64_t',
    'inotify',
    'inotify1',
    'int128_t',
    'iopl',
    'ioport',
    'kbdiacrs',
    'kbentry',
    'kbkeycode',
    'kbsentry',
    'kernel_long_t',
    'kernel_ulong_t',
    'label-as-value',
    'lgetxattr',
    'libaio',
    'libbsd',
    'libcrypt',
    'libdl',
    'libipsec-mb',
    'judy',
    'libpthread',
    'libpthread-spinlock',
    'librt',
    'libsctp',
    'libz',
    'linkat',
    'sock-diag',
    'listxattr',
    'llistxattr',
    'lockf',
    'loff_t',
    'lookup-dcookie',
    'lremovexattr',
    'lsetxattr',
    'madvise',
    'mallopt',
    'media_device_info',
    'memfd-create',
    'mincore',
    'mkdirat',
    'mknodat',
    'mlock',
    'mlock2',
    'mlockall',
    'modify-ldt',
    'mprotect',
    'mq-posix',
    'mq-sysv',
    'mremap',
    'msginfo',
    'msync',
    'mtrr_gentry',
    'munlock',
    'name-to-handle-at',
    'nanosleep',
    'nice',
    'off64_t',
    'open-by-handle-at',
    'open_how',
    'openat',
    'openat2',
    'personality',
    'pidfd-getfd',
    'pidfd-open',
    'pidfd-send-signal',
    'pipe2',
    'pkey-alloc',
    'pkey-free',
    'pkey-mprotect',
    'posix-fadvise',
    'posix-fallocate',
    'posix-madvise',
    'posix-memalign',
    'posix-openpt',
    'posix-spawn',
    'ppc-get-timebase',
    'ppoll',
    'prctl',
    'preadv',
    'preadv2',
    'prlimit',
    'process-vm-readv',
    'process-vm-writev',
    'pselect',
    'pthread-attr-setstack',
    'pthread_sigqueue',
    'ptrace',
    'ptsname',
    'pwritev',
    'pwritev2',
    'readlinkat',
    'recvmmsg',
    'remap-file-pages',
    'removexattr',
    'renameat',
    'renameat2',
    'rusage_ru_minflt',
    'rusage_ru_nvcsw',
    'sbrk',
    'sched-get-priority-max',
    'sched-get-priority-min',
    'sched-getaffinity',
    'sched-getcpu',
    'sched-rr-get-interval',
    'sched-setscheduler',
    'sched-yield',
    'sem-posix',
    'sem-sysv',
    'semtimedop',
    'sendmmsg',
    'serial-icounter',
    'serial-struct',
    'setdomainname',
    'setfsgid',
    'setfsuid',
    'setns',
    'setpgid',
    'setpgrp',
    'setpriority',
    'setproctitle',
    'setpwent',
    'setregid',
    'setresgid',
    'setresuid',
    'setreuid',
    'settimeofday',
    'setxattr',
    'shm-sysv',
    'shmid-ds',
    'shminfo',
    'sigaltstack',
    'signalfd',
    'sigqueue',
    'sigwaitinfo',
    'snd_ctl_card_info',
    'snd_ctl_tlv',
    'sockaddr_un',
    'splice',
    'statfs',
    'stime',
    'swap',
    'swapcontext',
    'sync-file-range',
    'syncfs',
    'cap',
    'sysinfo',
    'target-clones',
    'tcdrain',
    'tcflow',
    'tcflush',
    'tcgetattr',
    'tee',
    'termios',
    'tgkill',
    'timer-create',
    'timer-delete',
    'timer-getoverrun',
    'timer-gettime',
    'timer-settime',
    'ttyname',
    'uname',
    'unimapdesc',
    'unlinkat',
    'unshare',
    'user-desc',
    'ustat',
    'utimensat',
    'v4l2_audio',
    'v4l2_audioout',
    'v4l2_capability',
    'v4l2_dv_timings',
    'v4l2_enc_idx',
    'v4l2_framebuffer',
    'v4l2_jpegcompression',
    'v4l2_std_id',
    'vhangup',
    'vla-arg',
    'vmsplice',
    'vt_consize',
    'vt_mode',
    'vt_sizes',
    'vt_stat',
    'wait3',
    'wait4',
    'waitid',
    'wchar',
    'winsize',
]

test_have_header = [
    'aio.h',
    'asm/ldt.h',
    'asm/mtrr.h',
    'asm/prctl.h',
    'attr/xattr.h',
    'bsd/stdlib.h',
    'bsd/string.h',
    'bsd/sys/tree.h',
    'bsd/unistd.h',
    'complex.h',
    'cpuid.h',
    'crypt.h',
    'features.h',
    'fenv.h',
    'float.h',
    'grp.h',
    'intel-ipsec-mb.h',
    'Judy.h',
    'keyutils.h',
    'libaio.h',
    'libgen.h',
    'link.h',
    'linux/android/binder.h',
    'linux/android/binderfs.h',
    'linux/audit.h',
    'linux/cdrom.h',
    'linux/cn_proc.h',
    'linux/connector.h',
    'linux/dm-ioctl.h',
    'linux/fiemap.h',
    'linux/filter.h',
    'linux/fs.h',
    'linux/fsverity.h',
    'linux/futex.h',
    'linux/genetlink.h',
    'linux/hdreg.h',
    'linux/hpet.h',
    'linux/if_alg.h',
    'linux/if_packet.h',
    'linux/if_tun.h',
    'linux/io_uring.h',
    'linux/kd.h',
    'linux/loop.h',
    'linux/media.h',
    'linux/membarrier.h',
    'linux/mempolicy.h',
    'linux/netlink.h',
    'linux/openat2.h',
    'linux/pci.h',
    'linux/perf_event.h',
    'linux/posix_types.h',
    'linux/ptp_clock.h',
    'linux/random.h',
    'linux/rseq.h',
    'linux/rtc.h',
    'linux/rtnetlink.h',
    'linux/seccomp.h',
    'linux/serial.h',
    'linux/socket.h',
    'linux/sockios.h',
    'linux/sysctl.h',
    'linux/taskstats.h',
    'linux/udp.h',
    'linux/unix_diag.h',
    'linux/userfaultfd.h',
    'linux/version.h',
    'linux/videodev2.h',
    'linux/vt.h',
    'linux/watchdog.h',
    'locale.h',
    'malloc.h',
    'mntent.h',
    'mqueue.h',
    'net/if.h',
    'netinet/ip_icmp.h',
    'netinet/ip.h',
    'netinet/sctp.h',
    'netinet/tcp.h',
    'poll.h',
    'scsi/scsi.h',
    'scsi/sg.h',
    'semaphore.h',
    'sound/asound.h',
    'spawn.h',
    'strings.h',
    'sys/apparmor.h',
    'sys/auxv.h',
    'sys/epoll.h',
    'sys/eventfd.h',
    'sys/fanotify.h',
    'sys/fsuid.h',
    'sys/inotify.h',
    'sys/io.h',
    'sys/ipc.h',
    'sys/memfd.h',
    'sys/mount.h',
    'sys/msg.h',
    'sys/param.h',
    'sys/personality.h',
    'sys/platform/ppc.h',
    'sys/prctl.h',
    'sys/quota.h',
    'sys/select.h',
    'sys/sendfile.h',
    'sys/shm.h',
    'sys/signalfd.h',
    'sys/statfs.h',
    'sys/statvfs.h',
    'sys/swap.h',
    'sys/syscall.h',
    'sys/sysinfo.h',
    'sys/sysmacros.h',
    'sys/timerfd.h',
    'sys/timex.h',
    'sys/tree.h',
    'sys/ucred.h',
    'sys/uio.h',
    'sys/un.h',
    'sys/utsname.h',
    'sys/vfs.h',
    'sys/xattr.h',
    'syslog.h',
    'termio.h',
    'termios.h',
    'ucontext.h',
    'ustat.h',
    'utime.h',
]



message('Checking for system features, this may take some time.')

foreach test : tests_have_x
    test_name = test.startswith('lib') ? 'lib_' + test.substring(4) : test
    macro_name = 'HAVE_' + test_name.underscorify().to_upper()

    test_source = files('test-@0@.c'.format(test))
    test_result = cc.links(test_source)

    message('Has feature @0@ : @1@'.format(test_name, test_result ? 'YES' : 'NO'))
    tests_results += { macro_name: test_result }
endforeach

foreach test : test_have_header
    test_result = cc.has_header(test)
    macro_name = 'HAVE_' + test.underscorify().to_upper()

    tests_results += { macro_name: test_result }
endforeach

math_prefix = '''
#include <math.h>
#include <complex.h>
'''

test_functions = [
    { 'test': 'cabsl',          'prefix': math_prefix,  'deps': math, },
    { 'test': 'ccosl',          'prefix': math_prefix,  'deps': math, },
    { 'test': 'coshl',          'prefix': math_prefix,  'deps': math, },
    { 'test': 'cosl',           'prefix': math_prefix,  'deps': math, },
    { 'test': 'cpow',           'prefix': math_prefix,  'deps': math, },
    { 'test': 'csinl',          'prefix': math_prefix,  'deps': math, },
    { 'test': 'expl',           'prefix': math_prefix,  'deps': math, },
    { 'test': 'lgammal',        'prefix': math_prefix,  'deps': math, },
    { 'test': 'logl',           'prefix': math_prefix,  'deps': math, },
    { 'test': 'powl',           'prefix': math_prefix,  'deps': math, },
    { 'test': 'rintl',          'prefix': math_prefix,  'deps': math, },
    { 'test': 'sinhl',          'prefix': math_prefix,  'deps': math, },
    { 'test': 'sinl',           'prefix': math_prefix,  'deps': math, },
    { 'test': 'sqrtl',          'prefix': math_prefix,  'deps': math, },

    { 'test': 'strlcat',        'deps': libbsd, },
    { 'test': 'strlcpy',        'deps': libbsd, },

    { 'test': 'wcscasecmp',     },
    { 'test': 'wcscat',         },
    { 'test': 'wcschr',         },
    { 'test': 'wcscmp',         },
    { 'test': 'wcscoll',        },
    { 'test': 'wcscpy',         },
    { 'test': 'wcslcat',        },
    { 'test': 'wcslcpy',        },
    { 'test': 'wcslen',         },
    { 'test': 'wcsncasecmp',    },
    { 'test': 'wcsncat',        },
    { 'test': 'wcsncmp',        },
    { 'test': 'wcsrchr',        },
    { 'test': 'wcsxfrm',        },
]

foreach test_dict : test_functions
    test = test_dict['test']
    macro_name = 'HAVE_' + test.underscorify().to_upper()

    test_result = cc.has_function(test,
        prefix: test_dict.get('prefix', ''),
        dependencies: test_dict.get('deps', []),
    )
    tests_results += { macro_name: test_result }
endforeach



test_types = [
    { 'macro': 'HAVE_FLOAT_DECIMAL32',  'type': '_Decimal32',   },
    { 'macro': 'HAVE_FLOAT_DECIMAL64',  'type': '_Decimal64',   },
    { 'macro': 'HAVE_FLOAT_DECIMAL128', 'type': '_Decimal128',  },
    { 'macro': 'HAVE_FLOAT16',          'type': '__fp16',       },
    { 'macro': 'HAVE_FLOAT32',          'type': '_Float32',     },
    { 'macro': 'HAVE_FLOAT80',          'type': '__float80',    },
    { 'macro': 'HAVE_FLOAT128',         'type': '__float128',   },
]

foreach type: test_types
    tests_results += { type['macro']: cc.has_type(type['type']) }
endforeach


# TODO HAVE_VECMATH
tests_results += { 'HAVE_VECMATH': true }

# TODO HAVE_ATOMIC
tests_results += { 'HAVE_ATOMIC': true }


have_apparmor = cc.links(files('test-apparmor.c'), dependencies: libapparmor)
tests_results += { 'HAVE_APPARMOR': true }


###############################################################################
# Use the tests_results

foreach define, result : tests_results
    if result
        add_project_arguments('-D' + define, language: 'c')
    endif
endforeach
